CREATE TABLE "users" (
  "user_id" uuid PRIMARY KEY,
  "user_name" varchar(255) NOT NULL,
  "email" varchar(255),
  "password" varchar(255) NOT NULL,
  "created_at" datetime NOT NULL DEFAULT (now())
);

CREATE TABLE "posts" (
  "post_id" uuid PRIMARY KEY,
  "user_id" uuid,
  "title" varchar(255) NOT NULL,
  "text" text NOT NULL,
  "thumbnail_image_id" uuid,
  "created_at" datetime NOT NULL DEFAULT (now()),
  "updated_at" datetime DEFAULT null,
  "deleted_at" datetime DEFAULT null
);

CREATE TABLE "tags" (
  "tag_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" varchar(255) NOT NULL,
  "slug" varchar(255) UNIQUE NOT NULL,
  "created_at" datetime NOT NULL DEFAULT (now())
);

CREATE TABLE "post_tags" (
  "post_id" uuid,
  "tag_id" int,
  "created_at" datetime NOT NULL DEFAULT (now()),
  "primary" key(post_id,tag_id)
);

CREATE TABLE "images" (
  "image_id" uuid PRIMARY KEY,
  "post_id" uuid,
  "image_path" varchar(255),
  "alt_text" varchar(255),
  "create_at" datetime NOT NULL DEFAULT (now())
);

COMMENT ON COLUMN "users"."password" IS 'hashed value';
COMMENT ON COLUMN "posts"."deleted_at" IS 'soft delete';
COMMENT ON COLUMN "post_tags"."primary" IS 'composite primary key';

-- foreign keys
ALTER TABLE "posts" ADD FOREIGN KEY ("user_id") REFERENCES "users" ("user_id");
ALTER TABLE "post_tags" ADD FOREIGN KEY ("post_id") REFERENCES "posts" ("post_id");
ALTER TABLE "post_tags" ADD FOREIGN KEY ("tag_id") REFERENCES "tags" ("tag_id");
ALTER TABLE "images" ADD FOREIGN KEY ("post_id") REFERENCES "posts" ("post_id");

-- indexes
